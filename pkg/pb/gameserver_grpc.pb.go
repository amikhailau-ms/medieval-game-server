// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameManagerClient is the client API for GameManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameManagerClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	Talk(ctx context.Context, opts ...grpc.CallOption) (GameManager_TalkClient, error)
}

type gameManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewGameManagerClient(cc grpc.ClientConnInterface) GameManagerClient {
	return &gameManagerClient{cc}
}

func (c *gameManagerClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/gameserver.GameManager/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameManagerClient) Talk(ctx context.Context, opts ...grpc.CallOption) (GameManager_TalkClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameManager_ServiceDesc.Streams[0], "/gameserver.GameManager/Talk", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameManagerTalkClient{stream}
	return x, nil
}

type GameManager_TalkClient interface {
	Send(*ClientMessage) error
	Recv() (*ServerResponse, error)
	grpc.ClientStream
}

type gameManagerTalkClient struct {
	grpc.ClientStream
}

func (x *gameManagerTalkClient) Send(m *ClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameManagerTalkClient) Recv() (*ServerResponse, error) {
	m := new(ServerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameManagerServer is the server API for GameManager service.
// All implementations must embed UnimplementedGameManagerServer
// for forward compatibility
type GameManagerServer interface {
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	Talk(GameManager_TalkServer) error
	mustEmbedUnimplementedGameManagerServer()
}

// UnimplementedGameManagerServer must be embedded to have forward compatible implementations.
type UnimplementedGameManagerServer struct {
}

func (UnimplementedGameManagerServer) Connect(context.Context, *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedGameManagerServer) Talk(GameManager_TalkServer) error {
	return status.Errorf(codes.Unimplemented, "method Talk not implemented")
}
func (UnimplementedGameManagerServer) mustEmbedUnimplementedGameManagerServer() {}

// UnsafeGameManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameManagerServer will
// result in compilation errors.
type UnsafeGameManagerServer interface {
	mustEmbedUnimplementedGameManagerServer()
}

func RegisterGameManagerServer(s grpc.ServiceRegistrar, srv GameManagerServer) {
	s.RegisterService(&GameManager_ServiceDesc, srv)
}

func _GameManager_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameserver.GameManager/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameManager_Talk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameManagerServer).Talk(&gameManagerTalkServer{stream})
}

type GameManager_TalkServer interface {
	Send(*ServerResponse) error
	Recv() (*ClientMessage, error)
	grpc.ServerStream
}

type gameManagerTalkServer struct {
	grpc.ServerStream
}

func (x *gameManagerTalkServer) Send(m *ServerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameManagerTalkServer) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameManager_ServiceDesc is the grpc.ServiceDesc for GameManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gameserver.GameManager",
	HandlerType: (*GameManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _GameManager_Connect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Talk",
			Handler:       _GameManager_Talk_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gameserver.proto",
}
