// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/amikhailau/medieval-game-server/pkg/mpb/matchmaker.proto

package mpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MatchmakeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchmakeRequest) Reset()         { *m = MatchmakeRequest{} }
func (m *MatchmakeRequest) String() string { return proto.CompactTextString(m) }
func (*MatchmakeRequest) ProtoMessage()    {}
func (*MatchmakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_13ffa8c9744c0106, []int{0}
}

func (m *MatchmakeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchmakeRequest.Unmarshal(m, b)
}
func (m *MatchmakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchmakeRequest.Marshal(b, m, deterministic)
}
func (m *MatchmakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchmakeRequest.Merge(m, src)
}
func (m *MatchmakeRequest) XXX_Size() int {
	return xxx_messageInfo_MatchmakeRequest.Size(m)
}
func (m *MatchmakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchmakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MatchmakeRequest proto.InternalMessageInfo

type MatchmakeResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchmakeResponse) Reset()         { *m = MatchmakeResponse{} }
func (m *MatchmakeResponse) String() string { return proto.CompactTextString(m) }
func (*MatchmakeResponse) ProtoMessage()    {}
func (*MatchmakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13ffa8c9744c0106, []int{1}
}

func (m *MatchmakeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchmakeResponse.Unmarshal(m, b)
}
func (m *MatchmakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchmakeResponse.Marshal(b, m, deterministic)
}
func (m *MatchmakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchmakeResponse.Merge(m, src)
}
func (m *MatchmakeResponse) XXX_Size() int {
	return xxx_messageInfo_MatchmakeResponse.Size(m)
}
func (m *MatchmakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchmakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MatchmakeResponse proto.InternalMessageInfo

func (m *MatchmakeResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CheckMatchmakeStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckMatchmakeStatusRequest) Reset()         { *m = CheckMatchmakeStatusRequest{} }
func (m *CheckMatchmakeStatusRequest) String() string { return proto.CompactTextString(m) }
func (*CheckMatchmakeStatusRequest) ProtoMessage()    {}
func (*CheckMatchmakeStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_13ffa8c9744c0106, []int{2}
}

func (m *CheckMatchmakeStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckMatchmakeStatusRequest.Unmarshal(m, b)
}
func (m *CheckMatchmakeStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckMatchmakeStatusRequest.Marshal(b, m, deterministic)
}
func (m *CheckMatchmakeStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckMatchmakeStatusRequest.Merge(m, src)
}
func (m *CheckMatchmakeStatusRequest) XXX_Size() int {
	return xxx_messageInfo_CheckMatchmakeStatusRequest.Size(m)
}
func (m *CheckMatchmakeStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckMatchmakeStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckMatchmakeStatusRequest proto.InternalMessageInfo

type CheckMatchmakeStatusResponse struct {
	Ready                bool     `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
	Failed               bool     `protobuf:"varint,2,opt,name=failed,proto3" json:"failed,omitempty"`
	NotMatchmaked        bool     `protobuf:"varint,3,opt,name=not_matchmaked,json=notMatchmaked,proto3" json:"not_matchmaked,omitempty"`
	Ip                   string   `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 int32    `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckMatchmakeStatusResponse) Reset()         { *m = CheckMatchmakeStatusResponse{} }
func (m *CheckMatchmakeStatusResponse) String() string { return proto.CompactTextString(m) }
func (*CheckMatchmakeStatusResponse) ProtoMessage()    {}
func (*CheckMatchmakeStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13ffa8c9744c0106, []int{3}
}

func (m *CheckMatchmakeStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckMatchmakeStatusResponse.Unmarshal(m, b)
}
func (m *CheckMatchmakeStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckMatchmakeStatusResponse.Marshal(b, m, deterministic)
}
func (m *CheckMatchmakeStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckMatchmakeStatusResponse.Merge(m, src)
}
func (m *CheckMatchmakeStatusResponse) XXX_Size() int {
	return xxx_messageInfo_CheckMatchmakeStatusResponse.Size(m)
}
func (m *CheckMatchmakeStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckMatchmakeStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckMatchmakeStatusResponse proto.InternalMessageInfo

func (m *CheckMatchmakeStatusResponse) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

func (m *CheckMatchmakeStatusResponse) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

func (m *CheckMatchmakeStatusResponse) GetNotMatchmaked() bool {
	if m != nil {
		return m.NotMatchmaked
	}
	return false
}

func (m *CheckMatchmakeStatusResponse) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *CheckMatchmakeStatusResponse) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type CancelMatchmakeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelMatchmakeRequest) Reset()         { *m = CancelMatchmakeRequest{} }
func (m *CancelMatchmakeRequest) String() string { return proto.CompactTextString(m) }
func (*CancelMatchmakeRequest) ProtoMessage()    {}
func (*CancelMatchmakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_13ffa8c9744c0106, []int{4}
}

func (m *CancelMatchmakeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelMatchmakeRequest.Unmarshal(m, b)
}
func (m *CancelMatchmakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelMatchmakeRequest.Marshal(b, m, deterministic)
}
func (m *CancelMatchmakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelMatchmakeRequest.Merge(m, src)
}
func (m *CancelMatchmakeRequest) XXX_Size() int {
	return xxx_messageInfo_CancelMatchmakeRequest.Size(m)
}
func (m *CancelMatchmakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelMatchmakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelMatchmakeRequest proto.InternalMessageInfo

type CancelMatchmakeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelMatchmakeResponse) Reset()         { *m = CancelMatchmakeResponse{} }
func (m *CancelMatchmakeResponse) String() string { return proto.CompactTextString(m) }
func (*CancelMatchmakeResponse) ProtoMessage()    {}
func (*CancelMatchmakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13ffa8c9744c0106, []int{5}
}

func (m *CancelMatchmakeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelMatchmakeResponse.Unmarshal(m, b)
}
func (m *CancelMatchmakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelMatchmakeResponse.Marshal(b, m, deterministic)
}
func (m *CancelMatchmakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelMatchmakeResponse.Merge(m, src)
}
func (m *CancelMatchmakeResponse) XXX_Size() int {
	return xxx_messageInfo_CancelMatchmakeResponse.Size(m)
}
func (m *CancelMatchmakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelMatchmakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CancelMatchmakeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MatchmakeRequest)(nil), "matchmaker.MatchmakeRequest")
	proto.RegisterType((*MatchmakeResponse)(nil), "matchmaker.MatchmakeResponse")
	proto.RegisterType((*CheckMatchmakeStatusRequest)(nil), "matchmaker.CheckMatchmakeStatusRequest")
	proto.RegisterType((*CheckMatchmakeStatusResponse)(nil), "matchmaker.CheckMatchmakeStatusResponse")
	proto.RegisterType((*CancelMatchmakeRequest)(nil), "matchmaker.CancelMatchmakeRequest")
	proto.RegisterType((*CancelMatchmakeResponse)(nil), "matchmaker.CancelMatchmakeResponse")
}

func init() {
	proto.RegisterFile("github.com/amikhailau/medieval-game-server/pkg/mpb/matchmaker.proto", fileDescriptor_13ffa8c9744c0106)
}

var fileDescriptor_13ffa8c9744c0106 = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4d, 0x6b, 0xdb, 0x40,
	0x14, 0x44, 0xaa, 0x6d, 0xea, 0x47, 0x6b, 0xb7, 0x8b, 0xeb, 0xaa, 0xaa, 0x0d, 0x46, 0xa6, 0xd4,
	0x18, 0x6c, 0x41, 0x0b, 0xa5, 0x24, 0xb7, 0xf8, 0x9c, 0x8b, 0x72, 0xcb, 0xc5, 0xac, 0xa4, 0x8d,
	0xb4, 0x48, 0xfb, 0x11, 0x69, 0x65, 0xc8, 0x21, 0x97, 0xfc, 0x85, 0x1c, 0xf2, 0xc3, 0x72, 0xcd,
	0x31, 0x3f, 0x24, 0x20, 0xc9, 0xb2, 0xfc, 0x11, 0x87, 0xdc, 0xf4, 0x66, 0x86, 0x79, 0xb3, 0xa3,
	0x07, 0x8b, 0x80, 0xaa, 0x30, 0x73, 0xe7, 0x9e, 0x60, 0x36, 0x66, 0x34, 0x0a, 0x31, 0x8d, 0x71,
	0x66, 0x33, 0xe2, 0x53, 0xb2, 0xc2, 0xf1, 0x2c, 0xc0, 0x8c, 0xcc, 0x52, 0x92, 0xac, 0x48, 0x62,
	0xcb, 0x28, 0xb0, 0x99, 0x74, 0x6d, 0x86, 0x95, 0x17, 0x32, 0x1c, 0x91, 0x64, 0x2e, 0x13, 0xa1,
	0x04, 0x82, 0x0d, 0x62, 0x0e, 0x02, 0x21, 0x82, 0x98, 0xd8, 0x58, 0x52, 0x1b, 0x73, 0x2e, 0x14,
	0x56, 0x54, 0xf0, 0xb4, 0x50, 0x5a, 0x08, 0xbe, 0x9c, 0xaf, 0xb5, 0x0e, 0xb9, 0xce, 0x48, 0xaa,
	0xac, 0x31, 0x7c, 0xad, 0x61, 0xa9, 0x14, 0x3c, 0x25, 0xa8, 0x03, 0x3a, 0xf5, 0x0d, 0x6d, 0xa4,
	0x4d, 0xda, 0x8e, 0x4e, 0x7d, 0x6b, 0x08, 0x3f, 0x17, 0x21, 0xf1, 0xa2, 0x4a, 0x79, 0xa1, 0xb0,
	0xca, 0xd2, 0xb5, 0xc7, 0x83, 0x06, 0x83, 0xc3, 0x7c, 0xe9, 0xd7, 0x83, 0x66, 0x42, 0xb0, 0x7f,
	0x93, 0x5b, 0x7e, 0x74, 0x8a, 0x01, 0xf5, 0xa1, 0x75, 0x85, 0x69, 0x4c, 0x7c, 0x43, 0xcf, 0xe1,
	0x72, 0x42, 0xbf, 0xa0, 0xc3, 0x85, 0x5a, 0x56, 0xcf, 0xf2, 0x8d, 0x0f, 0x39, 0xff, 0x99, 0x0b,
	0x55, 0x6d, 0xf0, 0xf3, 0x90, 0xd2, 0x68, 0x94, 0x21, 0x25, 0x42, 0xd0, 0x90, 0x22, 0x51, 0x46,
	0x73, 0xa4, 0x4d, 0x9a, 0x4e, 0xfe, 0x6d, 0x19, 0xd0, 0x5f, 0x60, 0xee, 0x91, 0x78, 0xef, 0xdd,
	0x3f, 0xe0, 0xfb, 0x1e, 0x53, 0xa4, 0xfd, 0xf3, 0xa4, 0x03, 0x54, 0x68, 0x82, 0x96, 0xd0, 0xae,
	0x26, 0x34, 0x98, 0xd7, 0xfa, 0xdf, 0x35, 0x35, 0x87, 0xaf, 0xb0, 0x85, 0xb1, 0xf5, 0xed, 0xee,
	0xf1, 0xf9, 0x5e, 0xef, 0x5a, 0xb0, 0xf9, 0x89, 0x27, 0xda, 0x14, 0xdd, 0x42, 0xef, 0x50, 0x7b,
	0xe8, 0x77, 0xdd, 0xed, 0x48, 0xff, 0xe6, 0xe4, 0x6d, 0x61, 0x99, 0x00, 0xe5, 0x09, 0x3e, 0xa1,
	0x5a, 0x02, 0xc4, 0xa1, 0xbb, 0xd3, 0x04, 0xb2, 0xb6, 0x0c, 0x0f, 0x16, 0x68, 0x8e, 0x8f, 0x6a,
	0xb6, 0xf7, 0x4d, 0x6b, 0xfb, 0xce, 0xfe, 0x5f, 0xfe, 0x7b, 0xff, 0xd9, 0x9f, 0x32, 0xe9, 0xba,
	0xad, 0xfc, 0x8c, 0xff, 0xbe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf9, 0xbe, 0x55, 0x56, 0x37, 0x03,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MatchmakerClient is the client API for Matchmaker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MatchmakerClient interface {
	Matchmake(ctx context.Context, in *MatchmakeRequest, opts ...grpc.CallOption) (*MatchmakeResponse, error)
	CheckMatchmakeStatus(ctx context.Context, in *CheckMatchmakeStatusRequest, opts ...grpc.CallOption) (*CheckMatchmakeStatusResponse, error)
	CancelMatchmake(ctx context.Context, in *CancelMatchmakeRequest, opts ...grpc.CallOption) (*CancelMatchmakeResponse, error)
}

type matchmakerClient struct {
	cc *grpc.ClientConn
}

func NewMatchmakerClient(cc *grpc.ClientConn) MatchmakerClient {
	return &matchmakerClient{cc}
}

func (c *matchmakerClient) Matchmake(ctx context.Context, in *MatchmakeRequest, opts ...grpc.CallOption) (*MatchmakeResponse, error) {
	out := new(MatchmakeResponse)
	err := c.cc.Invoke(ctx, "/matchmaker.Matchmaker/Matchmake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerClient) CheckMatchmakeStatus(ctx context.Context, in *CheckMatchmakeStatusRequest, opts ...grpc.CallOption) (*CheckMatchmakeStatusResponse, error) {
	out := new(CheckMatchmakeStatusResponse)
	err := c.cc.Invoke(ctx, "/matchmaker.Matchmaker/CheckMatchmakeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerClient) CancelMatchmake(ctx context.Context, in *CancelMatchmakeRequest, opts ...grpc.CallOption) (*CancelMatchmakeResponse, error) {
	out := new(CancelMatchmakeResponse)
	err := c.cc.Invoke(ctx, "/matchmaker.Matchmaker/CancelMatchmake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchmakerServer is the server API for Matchmaker service.
type MatchmakerServer interface {
	Matchmake(context.Context, *MatchmakeRequest) (*MatchmakeResponse, error)
	CheckMatchmakeStatus(context.Context, *CheckMatchmakeStatusRequest) (*CheckMatchmakeStatusResponse, error)
	CancelMatchmake(context.Context, *CancelMatchmakeRequest) (*CancelMatchmakeResponse, error)
}

func RegisterMatchmakerServer(s *grpc.Server, srv MatchmakerServer) {
	s.RegisterService(&_Matchmaker_serviceDesc, srv)
}

func _Matchmaker_Matchmake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchmakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).Matchmake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchmaker.Matchmaker/Matchmake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).Matchmake(ctx, req.(*MatchmakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaker_CheckMatchmakeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMatchmakeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).CheckMatchmakeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchmaker.Matchmaker/CheckMatchmakeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).CheckMatchmakeStatus(ctx, req.(*CheckMatchmakeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaker_CancelMatchmake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMatchmakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).CancelMatchmake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchmaker.Matchmaker/CancelMatchmake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).CancelMatchmake(ctx, req.(*CancelMatchmakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Matchmaker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "matchmaker.Matchmaker",
	HandlerType: (*MatchmakerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Matchmake",
			Handler:    _Matchmaker_Matchmake_Handler,
		},
		{
			MethodName: "CheckMatchmakeStatus",
			Handler:    _Matchmaker_CheckMatchmakeStatus_Handler,
		},
		{
			MethodName: "CancelMatchmake",
			Handler:    _Matchmaker_CancelMatchmake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/amikhailau/medieval-game-server/pkg/mpb/matchmaker.proto",
}
