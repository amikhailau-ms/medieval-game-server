// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: github.com/amikhailau/medieval-game-server/pkg/mpb/matchmaker.proto

package mpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _matchmaker_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on MatchmakeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MatchmakeRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// MatchmakeRequestValidationError is the validation error returned by
// MatchmakeRequest.Validate if the designated constraints aren't met.
type MatchmakeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MatchmakeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MatchmakeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MatchmakeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MatchmakeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MatchmakeRequestValidationError) ErrorName() string { return "MatchmakeRequestValidationError" }

// Error satisfies the builtin error interface
func (e MatchmakeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatchmakeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MatchmakeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MatchmakeRequestValidationError{}

// Validate checks the field values on MatchmakeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MatchmakeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// MatchmakeResponseValidationError is the validation error returned by
// MatchmakeResponse.Validate if the designated constraints aren't met.
type MatchmakeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MatchmakeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MatchmakeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MatchmakeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MatchmakeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MatchmakeResponseValidationError) ErrorName() string {
	return "MatchmakeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MatchmakeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatchmakeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MatchmakeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MatchmakeResponseValidationError{}

// Validate checks the field values on CheckMatchmakeStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckMatchmakeStatusRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CheckMatchmakeStatusRequestValidationError is the validation error returned
// by CheckMatchmakeStatusRequest.Validate if the designated constraints
// aren't met.
type CheckMatchmakeStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckMatchmakeStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckMatchmakeStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckMatchmakeStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckMatchmakeStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckMatchmakeStatusRequestValidationError) ErrorName() string {
	return "CheckMatchmakeStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckMatchmakeStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckMatchmakeStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckMatchmakeStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckMatchmakeStatusRequestValidationError{}

// Validate checks the field values on CheckMatchmakeStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckMatchmakeStatusResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ready

	// no validation rules for Failed

	// no validation rules for NotMatchmaked

	// no validation rules for Ip

	// no validation rules for Port

	return nil
}

// CheckMatchmakeStatusResponseValidationError is the validation error returned
// by CheckMatchmakeStatusResponse.Validate if the designated constraints
// aren't met.
type CheckMatchmakeStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckMatchmakeStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckMatchmakeStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckMatchmakeStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckMatchmakeStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckMatchmakeStatusResponseValidationError) ErrorName() string {
	return "CheckMatchmakeStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckMatchmakeStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckMatchmakeStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckMatchmakeStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckMatchmakeStatusResponseValidationError{}

// Validate checks the field values on CancelMatchmakeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelMatchmakeRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CancelMatchmakeRequestValidationError is the validation error returned by
// CancelMatchmakeRequest.Validate if the designated constraints aren't met.
type CancelMatchmakeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelMatchmakeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelMatchmakeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelMatchmakeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelMatchmakeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelMatchmakeRequestValidationError) ErrorName() string {
	return "CancelMatchmakeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelMatchmakeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelMatchmakeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelMatchmakeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelMatchmakeRequestValidationError{}

// Validate checks the field values on CancelMatchmakeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelMatchmakeResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CancelMatchmakeResponseValidationError is the validation error returned by
// CancelMatchmakeResponse.Validate if the designated constraints aren't met.
type CancelMatchmakeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelMatchmakeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelMatchmakeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelMatchmakeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelMatchmakeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelMatchmakeResponseValidationError) ErrorName() string {
	return "CancelMatchmakeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelMatchmakeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelMatchmakeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelMatchmakeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelMatchmakeResponseValidationError{}
